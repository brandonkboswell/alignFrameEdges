var threshold = 1; //In Picasvar debug = false; //Whether we should alert when we find matchesvar bounds = ['top', 'left', 'bottom', 'right']; //Helper for the Alert Messagevar document = app.documents[0]; //Document to Analyzevar spreads = document.spreads; function findRectanglesAtSimilarSpot(object, objects, bound){    //Create An Array to hold the matches    var matches = [];        //Loop through all of the objects on the spread    for (var y = 0; y < objects.length; y++){        //Only check objects other than the current one        if(object.id !== objects[y].id){            //Store the Bounds of the Reference Object            var reference = object.geometricBounds[bound];            //Store the Bounds of the Loop Object            var loop = objects[y].geometricBounds[bound];            //Store the Difference Between the Two            var difference = Math.abs(reference - loop);            //If the difference is within the threshold, but not 0 then we should align it            if(difference <= threshold && difference !== 0){                //If Debug is enabled,  alert out each matching pairs info.                if(debug){                    alert('Bound '+bounds[bound]+', Reference bound = '+reference+', Loop Bound = '+loop+', Difference = '+difference);                }                //Add this object to the matches                matches.push(objects[y]);            }        }    }    return matches;}function alignBounds(bound, reference, nonreference){    //Store the Value that should be updated on the non-reference object    var referenceValue = reference.geometricBounds[bound];    //Store all the bounds for the nonreference object so that we can update them (Indesign requires you to specify them all to update the coordinates)    var nonreferenceValues = nonreference.geometricBounds;    //Update the Bound we care about    nonreferenceValues[bound] = referenceValue;    //Update the Bounds for the Entire Object (Move it in InDesign)    nonreference.geometricBounds = nonreferenceValues;}//Loop through all the spreadsfor (var z = 0; z < spreads.length; z++) {        var rectangles = spreads[z].rectangles;    //Loop through all the rectangles    for (var i = 0; i < rectangles.length; i++) {        //Do this for each side (Top, Bottom, Left, Right);        for (var b = 0; b < bounds.length; b++){            //Store the Matches From The Check            var matches = findRectanglesAtSimilarSpot(rectangles[i], rectangles, b);                        //If there are matches, align them            if(matches){                for (var x = 0; x < matches.length; x++) {                    alignBounds(b, rectangles[i], matches[x]);                }            }        }    }}